@using GoldEx.Client.Components.Services
@inherits LayoutComponentBase

<PageTitle>گلدکس</PageTitle>

<MudRTLProvider RightToLeft="true">
    <MudThemeProvider Theme="@_theme" IsDarkMode="IsDarkMode" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />

    @Body

    <div id="blazor-error-ui" data-nosnippet>
        خطایی در حین اجرای برنامه رخ داد
        <a href="." class="reload">بارگذاری مجدد</a>
        <span class="dismiss">🗙</span>
    </div>
</MudRTLProvider>

@code {
    private readonly MudTheme _theme = new()
        {
            PaletteLight = new PaletteLight
            {
            // Core colors
                Black = "#1C2526", // Deep black for contrast
                AppbarText = "#1C2526", // Deep black for appbar text
                AppbarBackground = "#FDF5E6", // Soft creamy gold for appbar
                DrawerBackground = "#FAF0E6", // Linen (off-white gold) for drawer
                GrayLight = "#D3D3D3", // Light gray for subtle elements
                GrayLighter = "#F5F5F5", // Very light gray for backgrounds

            // Primary and Secondary colors
                Primary = "#DAA520", // Bright gold for primary elements (buttons, links)
                Secondary = "#DAA520", // Mid gold for accents

            // Background and surface
                Background = "#FAF0E6", // Linen (off-white gold) as the main background
                Surface = "#FDF5E6", // Soft creamy gold for surfaces

            // Text colors
                TextPrimary = "#1C2526", // Deep black for primary text (used for general text, may not affect buttons)
                TextSecondary = "#B8860B", // Deep gold for secondary text
                TextDisabled = "#B8860B80", // Deep gold with opacity for disabled text

            // Action colors
                ActionDefault = "#DAA520", // Mid gold for default actions
                ActionDisabled = "#DAA52080", // Mid gold with opacity for disabled actions
                ActionDisabledBackground = "#FDF5E680", // Soft creamy gold with opacity for disabled backgrounds

            // Other semantic colors
                Info = "#4a86ff", // Keep as is (blue)
                Success = "#3dcb6c", // Keep as is (green)
                Warning = "#FFD700", // Bright gold for warnings
                Error = "#ff3f5f", // Keep as is (red)

            // Lines and dividers
                //LinesDefault = "#B8860B", // Deep gold for lines
                //TableLines = "#B8860B", // Deep gold for table lines
                Divider = "#B8860B", // Deep gold for dividers
            },
            PaletteDark = new PaletteDark
            {
            // Core colors
                Primary = "#DAA520", // Mid gold for primary elements (darker for better contrast with white text)
                Secondary = "#E6B800", // Metallic gold for accents
                Surface = "#1E1E1E", // Dark gray for surfaces (replacing dark brown #3F2A1D)
                Background = "#121212", // Near-black for the main background (replacing #1C2526)
                BackgroundGray = "#2A2A2A", // Medium dark gray for contrast (replacing #2A2F30)
                AppbarText = "#FDF5E6", // Soft creamy gold for appbar text
                AppbarBackground = "#1E1E1E", // Dark gray for appbar (replacing dark brown #3F2A1D)
                DrawerBackground = "#121212", // Near-black for drawer (replacing #1C2526)
                ActionDefault = "#DAA520", // Mid gold for default actions
                ActionDisabled = "#DAA52080", // Mid gold with opacity for disabled actions
                ActionDisabledBackground = "#B8860B80", // Deep gold with opacity for disabled backgrounds

            // Text colors
                TextPrimary = "#FDF5E6", // Soft creamy gold for primary text
                TextSecondary = "#E6B800", // Metallic gold for secondary text
                TextDisabled = "#E6B80080", // Metallic gold with opacity for disabled text

            // Drawer and icons
                DrawerIcon = "#FDF5E6", // Soft creamy gold for drawer icons
                DrawerText = "#FDF5E6", // Soft creamy gold for drawer text

            // Other colors
                GrayLight = "#4A4F50", // Darker gray for dark mode
                GrayLighter = "#2A2A2A", // Medium dark gray for consistency
                Info = "#4a86ff", // Keep as is (blue)
                Success = "#3dcb6c", // Keep as is (green)
                Warning = "#E6B800", // Metallic gold for warnings
                Error = "#ff3f5f", // Keep as is (red)
                //LinesDefault = "#B8860B", // Deep gold for lines
                //TableLines = "#B8860B", // Deep gold for table lines
                Divider = "#B8860B", // Deep gold for dividers
                OverlayLight = "#12121280", // Near-black with opacity for overlays (replacing #1C252680)
            },
            LayoutProperties = new LayoutProperties
            {
            //DefaultBorderRadius = "50" // Uncomment if you want rounded corners
            },
            Typography = new Typography
            {
                Default = new DefaultTypography
                {
                    FontFamily = ["IRANSans", "Vazirmatn", "Helvetica", "Arial", "sans-serif"]
                }
            }
        };

    public bool IsDarkMode { get; set; }

    [Inject] private IThemeService? ThemeService { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (ThemeService is ThemeService service)
        {
            service.OnToggleMode += OnToggleMode;
            IsDarkMode = service.IsDarkMode;
        }

        await base.OnInitializedAsync();
    }

    public void OnToggleMode(object? sender, EventArgs e)
    {
        IsDarkMode = ThemeService?.IsDarkMode ?? false;
        SetThemeMode(IsDarkMode);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadTheme();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadTheme()
    {
        var themeMode = await LocalStorage.GetItemAsStringAsync("IsDarkMode");

        if (!string.IsNullOrEmpty(themeMode) && bool.TryParse(themeMode, out var isDarkMode))
            SetThemeMode(isDarkMode);
    }

    private void SetThemeMode(bool isDarkMode)
    {
        IsDarkMode = isDarkMode;
        LocalStorage.SetItemAsStringAsync("IsDarkMode", IsDarkMode.ToString());
        StateHasChanged();
    }
}