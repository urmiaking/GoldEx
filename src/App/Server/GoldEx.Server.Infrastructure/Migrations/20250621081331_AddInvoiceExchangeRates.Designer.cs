// <auto-generated />
using System;
using GoldEx.Server.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoldEx.Server.Infrastructure.Migrations
{
    [DbContext(typeof(GoldExDbContext))]
    [Migration("20250621081331_AddInvoiceExchangeRates")]
    partial class AddInvoiceExchangeRates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("GoldEx.Server.Domain.CustomerAggregate.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CreditLimit")
                        .HasPrecision(36, 10)
                        .HasColumnType("decimal(36,10)");

                    b.Property<Guid?>("CreditLimitPriceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomerType")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("CreditLimitPriceUnitId");

                    b.HasIndex("FullName");

                    b.HasIndex("NationalId", "CustomerType")
                        .IsUnique();

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("GoldEx.Server.Domain.InvoiceAggregate.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<long>("InvoiceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PriceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PriceUnitId");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("GoldEx.Server.Domain.InvoiceItemAggregate.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ExchangeRate")
                        .HasPrecision(36, 10)
                        .HasColumnType("decimal(36,10)");

                    b.Property<decimal>("GramPrice")
                        .HasPrecision(36, 10)
                        .HasColumnType("decimal(36,10)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PriceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProfitPercent")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxPercent")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PriceUnitId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceItems", (string)null);
                });

            modelBuilder.Entity("GoldEx.Server.Domain.PaymentMethodAggregate.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("GoldEx.Server.Domain.PriceAggregate.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MarketType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Prices", (string)null);
                });

            modelBuilder.Entity("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PriceId")
                        .IsUnique()
                        .HasFilter("[PriceId] IS NOT NULL");

                    b.ToTable("PriceUnits", (string)null);
                });

            modelBuilder.Entity("GoldEx.Server.Domain.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CaratType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<decimal>("Wage")
                        .HasPrecision(36, 10)
                        .HasColumnType("decimal(36,10)");

                    b.Property<Guid?>("WagePriceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WageType")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasPrecision(36, 10)
                        .HasColumnType("decimal(36,10)");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductStatus");

                    b.HasIndex("WagePriceUnitId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("GoldEx.Server.Domain.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("GoldEx.Server.Domain.SettingAggregate.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GoldProfitPercent")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("GoldSafetyMarginPercent")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal>("JewelryProfitPercent")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("OldGoldCarat")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("PriceUpdateInterval")
                        .HasColumnType("time");

                    b.Property<decimal>("TaxPercent")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.HasKey("Id");

                    b.ToTable("Settings", (string)null);
                });

            modelBuilder.Entity("GoldEx.Server.Domain.TransactionAggregate.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Credit")
                        .HasPrecision(36, 10)
                        .HasColumnType("decimal(36,10)");

                    b.Property<decimal?>("CreditRate")
                        .HasPrecision(36, 10)
                        .HasColumnType("decimal(36,10)");

                    b.Property<Guid?>("CreditUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Debit")
                        .HasPrecision(36, 10)
                        .HasColumnType("decimal(36,10)");

                    b.Property<decimal?>("DebitRate")
                        .HasPrecision(36, 10)
                        .HasColumnType("decimal(36,10)");

                    b.Property<Guid?>("DebitUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreditUnitId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DebitUnitId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppRoleClaim", b =>
                {
                    b.HasOne("GoldEx.Sdk.Server.Domain.Entities.Identity.AppRole", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUserClaim", b =>
                {
                    b.HasOne("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUserLogin", b =>
                {
                    b.HasOne("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.HasOne("GoldEx.Sdk.Server.Domain.Entities.Identity.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUserToken", b =>
                {
                    b.HasOne("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoldEx.Server.Domain.CustomerAggregate.Customer", b =>
                {
                    b.HasOne("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", "CreditLimitPriceUnit")
                        .WithMany()
                        .HasForeignKey("CreditLimitPriceUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreditLimitPriceUnit");
                });

            modelBuilder.Entity("GoldEx.Server.Domain.InvoiceAggregate.Invoice", b =>
                {
                    b.HasOne("GoldEx.Server.Domain.CustomerAggregate.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", "PriceUnit")
                        .WithMany()
                        .HasForeignKey("PriceUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("GoldEx.Server.Domain.InvoiceAggregate.InvoiceDiscount", "Discounts", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("Amount")
                                .HasPrecision(36, 10)
                                .HasColumnType("decimal(36,10)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<Guid>("DiscountUnitId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal?>("ExchangeRate")
                                .HasPrecision(36, 10)
                                .HasColumnType("decimal(36,10)");

                            b1.HasKey("InvoiceId", "Id");

                            b1.HasIndex("DiscountUnitId");

                            b1.ToTable("InvoiceDiscounts", (string)null);

                            b1.HasOne("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", "DiscountUnit")
                                .WithMany()
                                .HasForeignKey("DiscountUnitId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");

                            b1.Navigation("DiscountUnit");
                        });

                    b.OwnsMany("GoldEx.Server.Domain.InvoiceAggregate.InvoiceExtraCost", "ExtraCosts", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("Amount")
                                .HasPrecision(36, 10)
                                .HasColumnType("decimal(36,10)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<decimal?>("ExchangeRate")
                                .HasPrecision(36, 10)
                                .HasColumnType("decimal(36,10)");

                            b1.Property<Guid>("PriceUnitId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("InvoiceId", "Id");

                            b1.HasIndex("PriceUnitId");

                            b1.ToTable("InvoiceExtraCosts", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");

                            b1.HasOne("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", "PriceUnit")
                                .WithMany()
                                .HasForeignKey("PriceUnitId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.Navigation("PriceUnit");
                        });

                    b.OwnsMany("GoldEx.Server.Domain.InvoiceAggregate.InvoicePayment", "InvoicePayment", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("Amount")
                                .HasPrecision(36, 10)
                                .HasColumnType("decimal(36,10)");

                            b1.Property<Guid>("AmountUnitId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<decimal?>("ExchangeRate")
                                .HasPrecision(36, 10)
                                .HasColumnType("decimal(36,10)");

                            b1.Property<string>("Note")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<DateTime>("PaymentDate")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("PaymentMethodId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ReferenceNumber")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("InvoiceId", "Id");

                            b1.HasIndex("AmountUnitId");

                            b1.HasIndex("PaymentMethodId");

                            b1.ToTable("InvoicePayments", (string)null);

                            b1.HasOne("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", "AmountUnit")
                                .WithMany()
                                .HasForeignKey("AmountUnitId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");

                            b1.HasOne("GoldEx.Server.Domain.PaymentMethodAggregate.PaymentMethod", "PaymentMethod")
                                .WithMany()
                                .HasForeignKey("PaymentMethodId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.Navigation("AmountUnit");

                            b1.Navigation("PaymentMethod");
                        });

                    b.Navigation("Customer");

                    b.Navigation("Discounts");

                    b.Navigation("ExtraCosts");

                    b.Navigation("InvoicePayment");

                    b.Navigation("PriceUnit");
                });

            modelBuilder.Entity("GoldEx.Server.Domain.InvoiceItemAggregate.InvoiceItem", b =>
                {
                    b.HasOne("GoldEx.Server.Domain.InvoiceAggregate.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", "PriceUnit")
                        .WithMany()
                        .HasForeignKey("PriceUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoldEx.Server.Domain.ProductAggregate.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("PriceUnit");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GoldEx.Server.Domain.PriceAggregate.Price", b =>
                {
                    b.OwnsOne("GoldEx.Server.Domain.PriceAggregate.PriceHistory", "PriceHistory", b1 =>
                        {
                            b1.Property<Guid>("PriceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<decimal>("CurrentValue")
                                .HasPrecision(36, 10)
                                .HasColumnType("decimal(36,10)");

                            b1.Property<string>("DailyChangeRate")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("LastUpdate")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("PriceId");

                            b1.ToTable("PriceHistories", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PriceId");
                        });

                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", b =>
                {
                    b.HasOne("GoldEx.Server.Domain.PriceAggregate.Price", "Price")
                        .WithOne()
                        .HasForeignKey("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", "PriceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Price");
                });

            modelBuilder.Entity("GoldEx.Server.Domain.ProductAggregate.Product", b =>
                {
                    b.HasOne("GoldEx.Server.Domain.ProductCategoryAggregate.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", "WagePriceUnit")
                        .WithMany()
                        .HasForeignKey("WagePriceUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsMany("GoldEx.Server.Domain.ProductAggregate.GemStone", "GemStones", b1 =>
                        {
                            b1.Property<string>("Code")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Carat")
                                .HasPrecision(36, 10)
                                .HasColumnType("decimal(36,10)");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Cut")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Purity")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("Code", "ProductId");

                            b1.HasIndex("ProductId");

                            b1.ToTable("GemStones", (string)null);

                            b1.WithOwner("Product")
                                .HasForeignKey("ProductId");

                            b1.Navigation("Product");
                        });

                    b.Navigation("GemStones");

                    b.Navigation("ProductCategory");

                    b.Navigation("WagePriceUnit");
                });

            modelBuilder.Entity("GoldEx.Server.Domain.TransactionAggregate.Transaction", b =>
                {
                    b.HasOne("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", "CreditUnit")
                        .WithMany()
                        .HasForeignKey("CreditUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GoldEx.Server.Domain.CustomerAggregate.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoldEx.Server.Domain.PriceUnitAggregate.PriceUnit", "DebitUnit")
                        .WithMany()
                        .HasForeignKey("DebitUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreditUnit");

                    b.Navigation("Customer");

                    b.Navigation("DebitUnit");
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GoldEx.Sdk.Server.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GoldEx.Server.Domain.CustomerAggregate.Customer", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("GoldEx.Server.Domain.InvoiceAggregate.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GoldEx.Server.Domain.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
