@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using GoldEx.Sdk.Server.Domain.Entities.Identity
@using GoldEx.Server.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GoldEx.Server.Components.Account.Shared

@inject SignInManager<AppUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@layout BaseLayout

<PageTitle>ورود</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mx-auto mt-5">
    <MudPaper Elevation="4" Class="p-4">
        <MudStack AlignItems="AlignItems.Center">
            <MudItem>
                <MudImage Src="/assets/logo/logo512.png" Alt="Logo" Height="50" />
            </MudItem>
            <MudItem>
                <MudText Align="Align.Center" Typo="Typo.h3" GutterBottom="true">ورود به گلدکس</MudText>
            </MudItem>
        </MudStack>

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                        Label="آدرس ایمیل" Placeholder="name@example.com"
                                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem xs="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                        Label="رمز عبور" InputType="InputType.Password" Placeholder="رمز عبور"
                                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem xs="12" Class="m-0 p-0">
                    <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">مرا بخاطر بسپار</MudStaticCheckBox>
                </MudItem>
                <MudItem xs="12">
                    <StatusMessage Message="@_errorMessage" Severity="Severity.Error" />
                </MudItem>
                <MudItem xs="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">ورود</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>

        <MudGrid Class="mt-1">
            <MudItem xs="12">
                <MudLink Href="Account/ForgotPassword">رمز عبور خود را فراموش کرده اید؟</MudLink><br />
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-4" />

        <MudText GutterBottom="true" Typo="Typo.body1">استفاده از سرویس خارجی</MudText>
        <ExternalLoginPicker />
    </MudPaper>
</MudContainer>

@code {
    private string? _errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            _errorMessage = "خطا: اطلاعات ورودی معتبر نیست";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "مرا بخاطر بسپار")]
        public bool RememberMe { get; set; }
    }
}
