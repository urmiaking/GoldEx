@attribute [Route(ClientRoutes.Accounts.ExternalLogin)]

@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject IUserStore<AppUser> UserStore
@inject IEmailSender<AppUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@layout EmptyBoxLayout

<PageTitle>ثبت نام</PageTitle>

<MudStack AlignItems="AlignItems.Center">
    <MudItem>
        <MudImage Src="/assets/logo/logo512.png" Alt="Logo" Height="50" />
    </MudItem>
    <MudItem>
        <MudText Align="Align.Center" Typo="Typo.h3" GutterBottom="true">گلدکس</MudText>
    </MudItem>
    <MudItem>
        <MudText Align="Align.Center" Typo="Typo.h5" GutterBottom="true">تکمیل ثبت نام</MudText>
    </MudItem>
    <MudItem>
        <StatusMessage Message="@_message" />
    </MudItem>
    <MudItem>
        <MudAlert Severity="Severity.Info">
            شما با موفقیت وارد حساب <strong>@ProviderDisplayName</strong> خود شدید.
            لطفاً در کادر زیر ایمیل خود را برای ورود به گلدکس وارد کنید و برای تکمیل فرایند، روی دکمه ثبت نام کلیک کنید.
        </MudAlert>
    </MudItem>
</MudStack>
<EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
    <DataAnnotationsValidator />

    <MudGrid Class="mt-2 mb-2">
        <MudItem xs="12">
            <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email" Variant="Variant.Outlined"
                                Label="آدرس ایمیل" FullWidth="true"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
        </MudItem>
    </MudGrid>
    <MudItem xs="12" Class="mt-0">
        <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">تکمیل ثبت نام</MudStaticButton>
    </MudItem>
</EditForm>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? _message;
    private ExternalLoginInfo? _externalLoginInfo;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => _externalLoginInfo?.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus(ClientRoutes.Accounts.Login, $"Error from external provider: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus(ClientRoutes.Accounts.Login, "Error loading external login information.", HttpContext);
        }

        _externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo(ClientRoutes.Accounts.Login);
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        if (_externalLoginInfo is null)
        {
            RedirectManager.RedirectToWithStatus(ClientRoutes.Accounts.Login, "Error loading external login information.", HttpContext);
        }

        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            _externalLoginInfo!.LoginProvider,
            _externalLoginInfo!.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                _externalLoginInfo.Principal.Identity?.Name,
                _externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo(ClientRoutes.Accounts.Lockout);
        }

        // If the user does not have an account, then bye bye!
        RedirectManager.RedirectToWithStatus(ClientRoutes.Accounts.Login, "حساب خارجی شما در سامانه ثبت نشده است", HttpContext);

        // if (_externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        // {
        //     Input.Email = _externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        // }
    }

    private async Task OnValidSubmitAsync()
    {
        if (_externalLoginInfo is null)
        {
            RedirectManager.RedirectToWithStatus(ClientRoutes.Accounts.Login, "در هنگام تأیید اطلاعات ورود از سرویس خارجی، مشکلی پیش آمد.", HttpContext);
        }

        var emailStore = GetEmailStore();
        var user = new AppUser(Input.Email.Split('@')[0], Input.Email, Input.Email);

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, _externalLoginInfo);
            if (result.Succeeded)
            {
                Logger.LogInformation("User created an account using {Name} provider.", _externalLoginInfo.LoginProvider);

                var userId = await UserManager.GetUserIdAsync(user);
                var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri(ClientRoutes.Accounts.ConfirmEmail).AbsoluteUri,
                    new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
                await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                // If account confirmation is required, we need to show the link if we don't have a real email sender
                if (UserManager.Options.SignIn.RequireConfirmedAccount)
                {
                    RedirectManager.RedirectTo(ClientRoutes.Accounts.RegisterConfirmation, new Dictionary<string, object?> { ["email"] = Input.Email });
                }

                await SignInManager.SignInAsync(user, isPersistent: false, _externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        _message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
    }

    private IUserEmailStore<AppUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<AppUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "لطفا {0} را وارد کنید")]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
