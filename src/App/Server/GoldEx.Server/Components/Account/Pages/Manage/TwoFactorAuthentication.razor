@attribute [Route(ClientRoutes.Accounts.Manage.TwoFactorAuthentication)]

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>احراز هویت دو مرحله ای (2FA)</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">احراز هویت دو مرحله ای (2FA)</MudText>

<StatusMessage />

@if (_canTrack)
{
    if (_is2FaEnabled)
    {
        if (_recoveryCodesLeft == 0)
        {
            <MudAlert Variant="Variant.Text" Severity="Severity.Error">شما دیگر کد بازیابی ندارید.</MudAlert>

            <MudText Typo="Typo.body1" Class="pt-4">
                شما قبل از ورود باید <MudLink Href="Account/Manage/GenerateRecoveryCodes">کدهای بازیابی جدیدی</MudLink> تولید کنید
            </MudText>
        }
        else if (_recoveryCodesLeft == 1)
        {
            <MudAlert Variant="Variant.Text" Severity="Severity.Warning">شما 1 کد بازیابی قابل استفاده دارید</MudAlert>

            <MudText Typo="Typo.body1" Class="pt-4">
                شما می توانید <MudLink Href="Account/Manage/GenerateRecoveryCodes">کدهای بازیابی جدیدی</MudLink> تولید کنید.
            </MudText>
        }
        else if (_recoveryCodesLeft <= 3)
        {
            <MudAlert Variant="Variant.Text" Severity="Severity.Warning">شما @_recoveryCodesLeft کد بازیابی قابل استفاده دارید.</MudAlert>

            <MudText Typo="Typo.body1" Class="pt-4">
                شما باید <MudLink Href="Account/Manage/GenerateRecoveryCodes">کدهای بازیابی جدیدی</MudLink> تولید کنید
            </MudText>
        }

        if (_isMachineRemembered)
        {
            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                <AntiforgeryToken />

                <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">فراموشی این مرورگر</MudStaticButton>
            </form>
        }

        <MudLink Href="Account/Manage/Disable2fa">غیرفعال سازی احراز هویت دو مرحله ای</MudLink>
        <br />
        <MudLink Href="Account/Manage/GenerateRecoveryCodes">بازنشانی کدهای بازیابی</MudLink>
    }

    <MudText Typo="Typo.h6" GutterBottom="true">برنامه Authenticator</MudText>

    @if (!_hasAuthenticator)
    {
        <MudLink Href="Account/Manage/EnableAuthenticator">افزودن برنامه Authenticator</MudLink>
        <br />
    }
    else
    {
        <MudLink Href="Account/Manage/EnableAuthenticator">تنظیم برنامه Authenticator</MudLink>
        <br />
        <MudLink Href="Account/Manage/ResetAuthenticator">بازنشانی برنامه Authenticator</MudLink>
    }
}
else
{
    <MudAlert Variant="Variant.Text" Severity="Severity.Error">سیاست حریم خصوصی و کوکی‌ها پذیرفته پذیرفته نشده است.</MudAlert>

    <MudText Typo="Typo.body1" Class="pt-4">
        شما باید قبل از فعال کردن تأیید دومرحله‌ای، سیاست را بپذیرید
    </MudText>
}

@code {
    private bool _canTrack;
    private bool _hasAuthenticator;
    private int _recoveryCodesLeft;
    private bool _is2FaEnabled;
    private bool _isMachineRemembered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        _hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(user) is not null;
        _is2FaEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        _isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        _recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "این مرورگر ذخیره نشده است. برای ورود دوباره از این مرورگر، باید کد تأیید دومرحله‌ای خود را وارد کنید.",
            HttpContext);
    }
}
