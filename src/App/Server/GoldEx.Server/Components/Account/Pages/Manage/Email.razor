@attribute [Route(ClientRoutes.Accounts.Manage.Email)]

@inject UserManager<AppUser> UserManager
@inject IEmailSender<AppUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>مدیریت ایمیل</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">مدیریت ایمیل</MudText>
<hr />

<StatusMessage Message="@_message" />
@if (!_isEmailConfirmed)
{
    <MudAlert Severity="Severity.Warning" ContentAlignment="HorizontalAlignment.Start">
        <p>
            آدرس ایمیل شما تایید نشده است. برای تایید ایمیل خود، گزینه فعالسازی را انتخاب کنید
        </p>
        <p>
            در صورت عدم تایید آدرس ایمیل، امکان بازیابی حساب خود را <strong>نخواهید داشت</strong>
        </p>
    </MudAlert>
    <MudText Typo="Typo.body1" GutterBottom="true">ارسال ایمیل فعالسازی</MudText>
    <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post" class="mb-2">
        <AntiforgeryToken />
        <MudGrid>
            <MudItem lg="6" md="12">
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudStaticTextField Variant="Variant.Outlined" Value="@_email" Label="ایمیل" Disabled="true" />

                    <MudStaticButton Size="Size.Large" StartIcon="@Icons.Material.Filled.VerifiedUser" Variant="Variant.Filled" Color="Color.Success" FormAction="FormAction.Submit">
                        فعالسازی
                    </MudStaticButton>
                </MudStack>
            </MudItem>
        </MudGrid>
    </form>
}
<MudText Typo="Typo.body1" GutterBottom="true">تغییر آدرس ایمیل ورود</MudText>
<EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem lg="4" md="12">
            <MudStaticTextField Variant="Variant.Outlined" Value="@_email" Label="ایمیل فعلی" Disabled="true" />
        </MudItem>
        
        <MudItem lg="8" md="12">
            <MudStack Row AlignItems="AlignItems.Center">
                <MudStaticTextField @bind-Value="@Input.NewEmail" For="@(() => Input.NewEmail)"
                                    UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "email" }, { "aria-required", "true" } } )"
                                    Label="ایمیل جدید" Variant="Variant.Outlined" />

                <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large"
                                 FormAction="FormAction.Submit" StartIcon="@Icons.Material.Filled.Autorenew">ذخیره</MudStaticButton>
            </MudStack>
        </MudItem>

    </MudGrid>
</EditForm>

@code {
    private string? _message;
    private AppUser _user = default!;
    private string? _email;
    private bool _isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _email = await UserManager.GetEmailAsync(_user);
        _isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(_user);

        Input.NewEmail ??= _email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == _email)
        {
            _message = "آدرس ایمیل شما تغییر نکرده است";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(_user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(_user, Input.NewEmail);

        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri(ClientRoutes.Accounts.ConfirmEmailChange).AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(_user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        _message = "لینک تأیید برای تغییر ایمیل ارسال شد. لطفاً ایمیل خود را بررسی کنید.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (_email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(_user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(_user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri(ClientRoutes.Accounts.ConfirmEmail).AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(_user, _email, HtmlEncoder.Default.Encode(callbackUrl));

        _message = "ایمیل تأیید ارسال شد. لطفاً ایمیل خود را بررسی کنید.";
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "لطفا {0} را وارد کنید")]
        [EmailAddress(ErrorMessage = "فرمت {0} صحیح نمی باشد")]
        [Display(Name = "ایمیل جدید")]
        public string? NewEmail { get; set; }
    }
}
