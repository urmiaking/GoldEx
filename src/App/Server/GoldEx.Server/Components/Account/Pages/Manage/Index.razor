@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using GoldEx.Sdk.Server.Domain.Entities.Identity
@using GoldEx.Server.Application.Extensions
@using GoldEx.Server.Services
@using Microsoft.AspNetCore.Identity

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>پروفایل کاربری</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">پروفایل کاربری</MudText>

<StatusMessage />

<EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem md="12">
            <MudStaticTextField Value="@_username" Label="نام کاربری" Disabled="true" Placeholder="نام کاربری" />
        </MudItem>
        <MudItem md="12">
            <MudStaticTextField For="@(() => Input.PhoneNumber)" @bind-Value="Input.PhoneNumber"
                                Label="شماره تلفن" HelperText="لطفا شماره تلفن خود را وارد کنید"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "tel-national" } } )" />
        </MudItem>
        <MudItem md="12">
            <MudStaticTextField For="@(() => Input.Name)" @bind-Value="Input.Name"
                                Label="نام و نام خانوادگی" HelperText="لطفا نام و نام خانوادگی خود را وارد کنید" />
        </MudItem>
        <MudItem md="12">
            <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">ذخیره</MudStaticButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private AppUser _user = default!;
    private string? _username;
    private string? _phoneNumber;
    private string? _name;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _username = await UserManager.GetUserNameAsync(_user);
        _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);
        _name = _user.Name;

        Input.PhoneNumber ??= _phoneNumber;
        Input.Name ??= _name;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != _phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(_user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("خطا: ثبت تلفن همراه با خطا مواجه شد", HttpContext);
            }
        }

        if (Input.Name != _name && !string.IsNullOrEmpty(Input.Name))
        {
            var setNameResult = await UserManager.SetFullNameAsync(_user, Input.Name);
            if (!setNameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("خطا: ثبتِ نام کاربر با خطا مواجه شد", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("پروفایل شما با موفقیت بروز شد", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone(ErrorMessage = "فرمت شماره تلفن صحیح نمی باشد")]
        [Display(Name = "شماره تلفن")]
        public string? PhoneNumber { get; set; }

        [Display(Name = "نام و نام خانوادگی کاربر")]
        public string? Name { get; set; }
    }
}
