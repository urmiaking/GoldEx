@attribute [Route(ClientRoutes.Accounts.Manage.EnableAuthenticator)]

@inject UserManager<AppUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

<PageTitle>پیکربندی برنامه Authenticator</PageTitle>

@if (_recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="_recoveryCodes.ToArray()" StatusMessage="@_message" />
}
else
{
    <MudText Typo="Typo.h6" GutterBottom="true">پیکربندی برنامه Authenticator</MudText>

    <StatusMessage Message="@_message" />

    <MudText Typo="Typo.body1" GutterBottom="true">برای استفاده از برنامه Authenticator مراحل زیر را دنبال کنید:</MudText>

    <ol class="list">
        <li>
            <MudText Typo="Typo.body2">
                یک برنامه احراز هویت دو مرحله‌ای مانند Microsoft Authenticator را برای
                <MudLink Target="_blank" Href="https://go.microsoft.com/fwlink/?Linkid=825072">اندروید</MudLink> و
                <MudLink Target="_blank" Href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</MudLink> یا
                Google Authenticator را برای
                <MudLink Target="_blank" Href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">اندروید</MudLink> و
                <MudLink Target="_blank" Href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</MudLink> دانلود کنید.
            </MudText>
        </li>
        <li>
            <MudText Typo="Typo.body2">
                کد QR را اسکن کنید یا این کلید را در برنامه احراز هویت دو مرحله‌ای خود وارد کنید. فاصله‌ها و حروف بزرگ و کوچک مهم نیستند:
            </MudText>

            <MudAlert Variant="Variant.Text" Severity="Severity.Info" Icon="@Icons.Material.Filled.Key" ContentAlignment="HorizontalAlignment.Start">
                @_sharedKey
                <MudItem Class="mt-4">
                    <svg xmlns="http://www.w3.org/2000/svg" height="300" width="300" stroke="none" 
                         version="1.1" viewBox="0 0 50 50">
                        <rect width="300" height="300" fill="#ffffff" />
                        <path d="@_svgGraphicsPath" fill="#000000" />
                    </svg>
                </MudItem>
            </MudAlert>
        </li>
        <li>
            <MudText Typo="Typo.body2">
                پس از اسکن کد QR یا وارد کردن کلید بالا، برنامه احراز هویت دو مرحله‌ای شما یک کد منحصر به فرد را در اختیار شما قرار می‌دهد. کد را در کادر تأیید زیر وارد کنید.
            </MudText>

            <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem md="12">
                        <MudStaticTextField @bind-Value="@Input.Code" For="@(() => Input.Code)" Label="کد تایید" HelperText="لطفا کد را وارد کنید" />
                    </MudItem>
                    <MudItem md="12">
                        <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">اعتبارسنجی</MudStaticButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </li>
    </ol>
}

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? _message;
    private AppUser _user = default!;
    private string? _sharedKey;
    private string? _svgGraphicsPath;
    private IEnumerable<string>? _recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        await LoadSharedKeyAndQrCodeUriAsync(_user);
    }

    private async Task OnValidSubmitAsync()
    {
        // Strip spaces and hyphens
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2FaTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            _user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2FaTokenValid)
        {
            _message = "خطا: کد وارد شده معتبر نیست.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(_user, true);
        var userId = await UserManager.GetUserIdAsync(_user);
        Logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

        _message = "برنامه Authenticator شما با موفقیت به GoldEx متصل شد!";

        if (await UserManager.CountRecoveryCodesAsync(_user) == 0)
        {
            _recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(_user, 10);
        }
        else
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", _message, HttpContext);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(AppUser user)
    {
        // Load the authenticator key & QR code URI to display on the form
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        _sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        var authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
        var qr = QrCode.EncodeText(authenticatorUri, QrCode.Ecc.Medium);
        _svgGraphicsPath = qr.ToGraphicsPath();
    }

    private static string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        var currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("GoldEx"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "اندازه {0} باید حداقل {2} و حداکثر {1} حرف باشد", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "کد تایید")]
        public string Code { get; set; } = "";
    }
}
