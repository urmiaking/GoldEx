@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using GoldEx.Sdk.Server.Domain.Entities.Identity
@using Microsoft.AspNetCore.Identity
@using GoldEx.Server.Services

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>تنظیم رمز عبور</PageTitle>

<h3>تنظیم رمز عبور</h3>
<StatusMessage Message="@_message" />
<p class="text-info">
    شما برای این سایت نام کاربری/رمز عبور محلی ندارید.
    یک حساب کاربری محلی اضافه کنید تا بتوانید بدون ورود با سرویس وارد شوید.
</p>
<div class="row">
    <div class="col-xl-6">
        <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword" class="form-control" 
                           autocomplete="new-password" placeholder="رمز عبور جدید خود را وارد کنید" />
                <label for="Input.NewPassword" class="form-label">رمز عبور جدید</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" 
                           autocomplete="new-password" placeholder="رمز عبور جدید خود را وارد کنید" />
                <label for="Input.ConfirmPassword" class="form-label">تکرار رمز عبور جدید</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">تنظیم رمز عبور</button>
        </EditForm>
    </div>
</div>

@code {
    private string? _message;
    private AppUser _user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(_user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(_user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            _message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("رمز عبور شما با موفقیت تنظیم شد.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "طول {0} حداقل باید {2} و حداکثر {1} حرف باشد", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "رمز عبور جدید")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "تکرار رمز عبور جدید")]
        [Compare(nameof(NewPassword), ErrorMessage = "رمز عبور و رمز عبور جدید مطابقت ندارند")]
        public string? ConfirmPassword { get; set; }
    }
}
