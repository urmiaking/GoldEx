@attribute [Route(ClientRoutes.Accounts.Manage.SetPassword)]

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>تنظیم رمز عبور</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">تنظیم رمز عبور</MudText>

<StatusMessage Message="@_message" />

<p class="text-info">
    شما برای این سایت نام کاربری/رمز عبور محلی ندارید.
    یک حساب کاربری محلی اضافه کنید تا بتوانید بدون ورود با سرویس وارد شوید.
</p>
<EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem md="12">
            <MudStaticTextField For="@(() => Input.NewPassword)" @bind-Value="Input.NewPassword" InputType="InputType.Password"
                                Label="رمز عبور جدید" Placeholder="رمز عبور جدید" HelperText="لطفا رمز عبور جدید خود را وارد کنید"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
        </MudItem>
        <MudItem md="12">
            <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword" InputType="InputType.Password"
                                Label="تکرار رمز عبور" Placeholder="تکرار رمز عبور" HelperText="لطفا رمز عبور جدید خود را تکرار کنید"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
        </MudItem>
        <MudItem md="12">
            <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">تنظیم رمز عبور</MudStaticButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private string? _message;
    private AppUser _user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(_user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(_user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            _message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("رمز عبور شما با موفقیت تنظیم شد.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "طول {0} حداقل باید {2} و حداکثر {1} حرف باشد", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "رمز عبور جدید")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "تکرار رمز عبور جدید")]
        [Compare(nameof(NewPassword), ErrorMessage = "رمز عبور و رمز عبور جدید مطابقت ندارند")]
        public string? ConfirmPassword { get; set; }
    }
}
