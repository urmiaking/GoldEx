@attribute [Route(ClientRoutes.Accounts.Manage.UserList)]
@attribute [Authorize(Roles = BuiltinRoles.Administrators)]

@inject UserManager<AppUser> UserManager
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>لیست کاربران</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">لیست کاربران سایت</MudText>

<hr />

<MudButton Variant="Variant.Filled" Class="mb-2" StartIcon="@Icons.Material.Filled.PersonAdd" 
           Color="Color.Success" FullWidth="true" Href="@ClientRoutes.Accounts.Manage.NewUser">افزودن کاربر جدید</MudButton>

<MudTable Items="@_users" Hover="true" Breakpoint="Breakpoint.Xs" Elevation="3" Dense="true" Loading="@_loading" FixedHeader="true" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>ایمیل</MudTh>
        <MudTh>نام کاربر</MudTh>
        <MudTh>عملیات</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ایمیل">@context.Email</MudTd>
        <MudTd DataLabel="نام کاربر">@context.Name</MudTd>
        <MudTd DataLabel="عملیات">
            <div class="d-flex gap-2">
                <MudButton Size="Size.Small" Href="@ClientRoutes.Accounts.Manage.EditUser.FormatRoute(new { id = context.Id })" Variant="Variant.Filled"
                           Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit">ویرایش</MudButton>
                @if (context.LockoutEnd > DateTime.Now)
                {
                    <MudButton Size="Size.Small" StartIcon="@Icons.Material.Filled.LockOpen" Color="Color.Success" Variant="Variant.Filled"
                               OnClick="@(() => UnlockUser(context))">فعالسازی</MudButton>
                }
                else
                {
                    <MudButton Size="Size.Small" StartIcon="@Icons.Material.Filled.Lock" Color="Color.Error" Variant="Variant.Filled"
                               OnClick="@(() => LockUser(context.Id))">غیرفعالسازی</MudButton>
                }
            </div>
        </MudTd>
    </RowTemplate>
</MudTable>

@code
{
    private List<AppUser> _users = [];
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        _users = await UserManager.Users.ToListAsync();
        _loading = false;

        await base.OnInitializedAsync();
    }

    private async Task UnlockUser(AppUser user)
    {
        await UserManager.SetLockoutEndDateAsync(user, null);
    }

    private void LockUser(Guid id)
    {
        NavigationManager.NavigateTo(ClientRoutes.Accounts.Manage.LockUser.FormatRoute(new { id }));
    }
}
