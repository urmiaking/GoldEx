@attribute [Route(ClientRoutes.Accounts.Manage.ResetAuthenticator)]

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>بازنشانی برنامه Authenticator</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">بازنشانی برنامه Authenticator</MudText>

<hr />

<StatusMessage />

<MudAlert Severity="Severity.Warning" Variant="Variant.Text" ContentAlignment="HorizontalAlignment.Start">
    در صورت بازنشانی کلید احراز هویت، برنامه Authenticator شما تا پیکربندی مجدد آن غیرفعال خواهد شد.
</MudAlert>

<MudText Typo="Typo.body2" Class="my-4">
    این فرآیند، تأیید هویت دو مرحله‌ای را تا زمان پیکربندی مجدد، غیرفعال می‌کند.
    در صورت عدم پیکربندی مجدد برنامه Authenticator، امنیت حساب شما فقط با رمز عبور ایستا تامین خواهد شد.
</MudText>

<form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
    <AntiforgeryToken />

    <MudStaticButton StartIcon="@Icons.Material.Filled.Update" Variant="Variant.Filled" 
                     Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">بازنشانی</MudStaticButton>
</form>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "Account/Manage/EnableAuthenticator",
            "کلید برنامه احراز هویت شما بازنشانی گردیده است، لازم است برنامه احراز هویت خود را با کلید جدید پیکربندی نمایید.",
            HttpContext);
    }
}
