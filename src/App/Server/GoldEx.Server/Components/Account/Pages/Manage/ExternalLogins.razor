@attribute [Route(ClientRoutes.Accounts.Manage.ExternalLogins)]

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<AppUser> UserStore
@inject IdentityRedirectManager RedirectManager

<PageTitle>مدیریت اتصال به سرویس‌های احراز هویت خارجی</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">سرویس های احراز هویت</MudText>
<hr />

<StatusMessage />
@if (_currentLogins?.Count > 0)
{
    <MudText Typo="Typo.body1" GutterBottom="true">سرویس های لینک شده به حساب شما</MudText>

    <div class="d-flex justify-content-between align-items-center">
        @foreach (var login in _currentLogins)
        {
            <MudItem Class="ml-2">
                <MudText Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.ArrowBackIosNew"></MudIcon> &nbsp; @login.ProviderDisplayName</MudText>
            </MudItem>
            <MudItem>
                @if (_showRemoveButton)
                {
                    <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync" method="post">
                        <AntiforgeryToken />
                        <div>
                            <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider" />
                            <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey" />
                            <MudStaticButton Size="Size.Medium"
                                             Variant="Variant.Filled" Color="Color.Error" FormAction="FormAction.Submit">
                                <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Title="حذف"></MudIcon>
                            </MudStaticButton>
                        </div>
                    </form>
                }
                else
                {
                    @: &nbsp;
                }
            </MudItem>
        }
    </div>
}
@if (_otherLogins?.Count > 0)
{
    <MudText Typo="Typo.body1" GutterBottom="true">افزودن لینک حساب خارجی</MudText>
    <form class="form-horizontal" action="@ApiUrls.Account.LinkExternalLogin()" method="post">
        <AntiforgeryToken />
        <div>
            <p>
                @foreach (var provider in _otherLogins)
                {
                    <input type="hidden" name="Provider" value="@provider.Name"/>

                    <MudItem xs="12">
                        <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large"
                                         FormAction="FormAction.Submit" StartIcon="@Icons.Custom.Brands.Google">@provider.DisplayName</MudStaticButton>
                    </MudItem>
                }
            </p>
        </div>
    </form>
}

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private AppUser _user = default!;
    private IList<UserLoginInfo>? _currentLogins;
    private IList<AuthenticationScheme>? _otherLogins;
    private bool _showRemoveButton;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private string? LoginProvider { get; set; }

    [SupplyParameterFromForm]
    private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _currentLogins = await UserManager.GetLoginsAsync(_user);
        _otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .Where(auth => _currentLogins.All(ul => auth.Name != ul.LoginProvider))
            .ToList();

        string? passwordHash = null;
        if (UserStore is IUserPasswordStore<AppUser> userPasswordStore)
        {
            passwordHash = await userPasswordStore.GetPasswordHashAsync(_user, HttpContext.RequestAborted);
        }

        _showRemoveButton = passwordHash is not null || _currentLogins.Count > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        var result = await UserManager.RemoveLoginAsync(_user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("خطا: حذف سرویس با خطا مواجه شد", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("سرویس احراز هویت با موفقیت حذف شد.", HttpContext);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        var userId = await UserManager.GetUserIdAsync(_user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("خطا: اطلاعات سرویس لود نشد", HttpContext);
        }

        var result = await UserManager.AddLoginAsync(_user, info);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("خطا: متاسفانه احراز هویت خارجی اضافه نشد. هر سرویس خارجی فقط می‌تواند به یک حساب کاربری اصلی متصل باشد.", HttpContext);
        }

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        RedirectManager.RedirectToCurrentPageWithStatus("سرویس احراز هویت با موفقیت به حساب افزوده شد.", HttpContext);
    }
}
