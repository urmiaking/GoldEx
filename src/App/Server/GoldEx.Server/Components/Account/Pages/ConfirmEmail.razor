@attribute [Route(ClientRoutes.Accounts.ConfirmEmail)]
@inject UserManager<AppUser> UserManager
@inject IdentityRedirectManager RedirectManager
@layout EmptyBoxLayout

<PageTitle>تایید ایمیل</PageTitle>

<MudStack AlignItems="AlignItems.Center">
    <MudItem>
        <MudImage Src="/assets/logo/logo512.png" Alt="Logo" Height="50" />
    </MudItem>
    <MudItem>
        <MudText Align="Align.Center" Typo="Typo.h3" GutterBottom="true">گلدکس</MudText>
    </MudItem>
    <MudItem>
        <MudText Align="Align.Center" Typo="Typo.h5" GutterBottom="true">تایید ایمیل</MudText>
    </MudItem>
    <MudItem>
        <StatusMessage Message="@_statusMessage" />
    </MudItem>
    <MudItem>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Primary" Href="@ClientRoutes.Accounts.Login">ورود به سامانه</MudButton>
    </MudItem>
</MudStack>

@code {
    private string? _statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            _statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            _statusMessage = result.Succeeded ? "حساب کاربری شما با موفقیت تایید شد." : "لینک تایید ایمیل منقضی شده است لطفا مجددا امتحان کنید.";
        }
    }
}
