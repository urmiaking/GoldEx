@page "/Account/LoginWithRecoveryCode"

@using System.ComponentModel.DataAnnotations
@using GoldEx.Sdk.Server.Domain.Entities.Identity
@using Microsoft.AspNetCore.Identity
@using GoldEx.Server.Services
@using GoldEx.Server.Components.Account.Shared

@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

<PageTitle>تایید کد بازیابی</PageTitle>

<h1>تایید کد بازیابی</h1>
<hr />
<StatusMessage Message="@_message" />
<p>
    شما درخواست کرده‌اید که با یک کد بازیابی وارد شوید.
    این ورود به سیستم تا زمانی که یک کد برنامه احراز هویت را هنگام ورود به سیستم ارائه دهید یا احراز هویت دو مرحله‌ای را غیرفعال و دوباره وارد شوید، ذخیره نخواهد شد.
</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.RecoveryCode" id="Input.RecoveryCode" class="form-control" autocomplete="off" placeholder="کد بازیابی" />
                <label for="Input.RecoveryCode" class="form-label">کد بازیابی</label>
                <ValidationMessage For="() => Input.RecoveryCode" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">ورود</button>
        </EditForm>
    </div>
</div>

@code {
    private string? _message;
    private AppUser _user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        _user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

        var userId = await UserManager.GetUserIdAsync(_user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with a recovery code.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("حساب شما مسدود شده است");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", userId);
            _message = "خطا: کد بازیابی اشتباه است";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "کد بازیابی")]
        public string RecoveryCode { get; set; } = "";
    }
}
