@attribute [Route(ClientRoutes.Accounts.Register)]

@inject UserManager<AppUser> UserManager
@inject IUserStore<AppUser> UserStore
@inject SignInManager<AppUser> SignInManager
@inject IEmailSender<AppUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@layout EmptyBoxLayout

<PageTitle>ثبت نام</PageTitle>


<MudText Align="Align.Center" Typo="Typo.h3" GutterBottom="true">ثبت نام</MudText>

<StatusMessage Message="@Message" />
<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <DataAnnotationsValidator />

    <MudText Typo="Typo.body1" GutterBottom="true">ساخت حساب جدید</MudText>

    <MudGrid>
        <MudItem xs="12">
            <MudStaticTextField For="@(() => Input.Name)" @bind-Value="Input.Name"
                                Label="نام" Placeholder="نام و نام خانوادگی"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "name" }, { "aria-required", "true" } } )"></MudStaticTextField>
        </MudItem>
        <MudItem xs="12">
            <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                Label="ایمیل" Placeholder="name@example.com"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "username" }, { "aria-required", "true" } })"></MudStaticTextField>
        </MudItem>
        <MudItem xs="12">
            <MudStaticTextField For="@(() => Input.PhoneNumber)" @bind-Value="Input.PhoneNumber"
                                Label="شماره تلفن" Placeholder="09141234567"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "phone-number" } })"></MudStaticTextField>
        </MudItem>
        <MudItem xs="12">
            <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                Label="رمز عبور" InputType="InputType.Password" Placeholder="رمز عبور"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } })" />
        </MudItem>
        <MudItem xs="12">
            <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                Label="تکرار رمز عبور" InputType="InputType.Password" Placeholder="تکرار رمز عبور"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } })" />
        </MudItem>
        <MudItem xs="12">
            <MudStaticButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true" FormAction="FormAction.Submit">ثبت نام</MudStaticButton>
        </MudItem>
    </MudGrid>
</EditForm>
<MudDivider Class="my-4" />

<ExternalLoginPicker ExternalLoginPickerSource="ExternalLoginSource.Register" />

@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var model = editContext.Model as InputModel;

        var user = CreateUser(model);

        if (user is null)
        {
            _identityErrors = [new IdentityError { Code = "CreateUserFailed", Description = "Can't create an instance of 'AppUser'." }];
            return;
        }

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            _identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri(ClientRoutes.Accounts.ConfirmEmail).AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                ClientRoutes.Accounts.RegisterConfirmation,
                new Dictionary<string, object?> { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private static AppUser? CreateUser(InputModel? model)
    {
        try
        {
            return model != null ? new AppUser(model.Name, model.Email, model.Email, model.PhoneNumber) : null;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(AppUser)}'. " +
                $"Ensure that '{nameof(AppUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<AppUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<AppUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "لطفا {0} را وارد کنید")]
        [Display(Name = "نام")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "لطفا {0} را وارد کنید")]
        [EmailAddress]
        [Display(Name = "ایمیل")]
        public string Email { get; set; } = "";

        [Phone(ErrorMessage = "فرمت {0} اشتباه است")]
        [Display(Name = "شماره تلفن")]
        public string? PhoneNumber { get; set; } = "";

        [Required(ErrorMessage = "لطفا {0} را وارد کنید")]
        [StringLength(100, ErrorMessage = "طول {0} حداقل باید {2} و حداکثر {1} حرف باشد", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "رمز عبور")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "تکرار رمز عبور")]
        [Compare("Password", ErrorMessage = "رمز عبور با تکرار آن مطابقت ندارد.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
