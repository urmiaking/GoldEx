@attribute [Route(ClientRoutes.Accounts.ResetPassword)]

@inject IdentityRedirectManager RedirectManager
@inject UserManager<AppUser> UserManager
@layout EmptyBoxLayout

<PageTitle>بازنشانی رمز عبور</PageTitle>


<MudStack AlignItems="AlignItems.Center">
    <MudItem>
        <MudImage Src="/assets/logo/logo512.png" Alt="Logo" Height="50" />
    </MudItem>
    <MudItem>
        <MudText Align="Align.Center" Typo="Typo.h3" GutterBottom="true">گلدکس</MudText>
    </MudItem>
    <MudItem>
        <MudText Align="Align.Center" Typo="Typo.h5" GutterBottom="true">بازنشانی رمز عبور</MudText>
    </MudItem>
</MudStack>

<EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="reset-password">
    <DataAnnotationsValidator />

    <input type="hidden" name="Input.Code" value="@Input.Code" />

    <MudGrid>
        <MudItem xs="12">
            <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                Label="آدرس ایمیل" Variant="Variant.Outlined"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
        </MudItem>
        <MudItem xs="12">
            <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                Label="رمز عبور" InputType="InputType.Password" Variant="Variant.Outlined"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
        </MudItem>
        <MudItem xs="12">
            <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                Label="تکرار رمز عبور" InputType="InputType.Password" Variant="Variant.Outlined"
                                UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "confirm-password" }, { "aria-required", "true" } } )" />
        </MudItem>
        @if (!string.IsNullOrEmpty(Message))
        {
            <MudItem xs="12" Class="mb-0">
                <StatusMessage Message="@Message" Severity="Severity.Error" />
            </MudItem>
        }

        <MudItem xs="12" Class="mt-0">
            <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">بازنشانی رمز عبور</MudStaticButton>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo(ClientRoutes.Accounts.InvalidPasswordReset);
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo(ClientRoutes.Accounts.ResetPasswordConfirmation);
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo(ClientRoutes.Accounts.ResetPasswordConfirmation);
        }

        _identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "لطفا {0} را وارد کنید")]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "لطفا {0} را وارد کنید")]
        [StringLength(100, ErrorMessage = "طول {0} حداقل باید {2} و حداکثر {1} حرف باشد.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "تکرار رمز عبور")]
        [Compare("Password", ErrorMessage = "رمز عبور با تکرار آن مطابقت ندارد")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
